import os.path

Import('env')
source_env = env.Clone()

if str(Platform()) == 'win32':
  source_env.Append(CPPDEFINES = [
    'XULRUNNER_SDK',
    'WIN32',
    '_WINDOWS',
    'XP_WIN32',
    'MOZILLA_STRICT_API',
    'XPCOM_GLUE',
    'XP_WIN',
    '_X86_',
    'setbackground_plugin_EXPORTS',
    '_CRT_SECURE_NO_WARNINGS',
    '_CRT_SECURE_NO_DEPRECATE'
    '_WINDLL',
    '_UNICODE',
    'UNICODE',
    'WIN32_LEAN_AND_MEAN'
    ])
  source_env.Append(CPPFLAGS = ['/EHsc', '/W3'])
  source_env.Append(LIBS = ['urlmon.lib', 'userenv.lib', 'user32.lib', 'ole32.lib', 'advapi32.lib'])
  if source_env['DEBUG']:
    source_env.Append(CCFLAGS = ['/Od', '/RTC1', '/Z7', '/MTd'])
    source_env.Append(LINKFLAGS = ['/DEBUG'])
    source_env.Append(CPPDEFINES = ['_DEBUG'])
  else:
    source_env.Append(CCFLAGS = ['/O2', '/MT'])
    source_env.Append(CPPEDEFINES = ['NDEBUG'])
else:
  # Unsupported platform
  assert False

# Targets to build C++ files
sources = source_env.Object(source_env.Glob('*.cc'))

if str(Platform()) == 'win32':
  # Add the def file to the sources list in windows. SCons will figure out what
  # to do with it. Need to compile and link in our resource script as well.
  sources = sources + source_env.RES('setwallpaper_plugin.rc') + [source_env.File('module_definition.def')]

# Target for plugin shared library
dll = source_env.SharedLibrary('setwallpaper_plugin', sources)

if 'MSVS_VERSION' in source_env:

  srcs = [os.path.basename(s.srcnode().path) for s in source_env.Glob('*.cc')]
  incs = [os.path.basename(i.srcnode().path) for i in source_env.Glob('*.h')]

  # The MSVSProject builder doesn't support command-line construction variables
  # for the build, re-build, and clean commands which all invoke scons. These
  # are necessary because the buildtarget may not exist to SCons if the
  # construction variables are not set. The two we care about are DEBUG and
  # TARGET_ARCH. Figuring out to change MSVSBUILDCOM and friends came from
  # reading the SCons source file Tool/msvs.py.

  commandline_vars = ' DEBUG=' + ('1' if source_env['DEBUG'] else '0') + ' TARGET_ARCH=' + source_env['TARGET_ARCH']
  variant = '{0}|{1}'.format('Debug' if source_env['DEBUG'] else 'Release', 'Win32' if source_env['TARGET_ARCH'] == 'x86' else 'x64')

  project_base_name = 'set-wallpaper-extension'
  project_name = '{0}-{1}-{2}{3}'.format(project_base_name,
                                         'debug' if source_env['DEBUG'] else 'release',
                                         'win32' if source_env['TARGET_ARCH'] == 'x86' else 'x64',
                                         source_env['MSVSPROJECTSUFFIX'])
  gen_project = source_env.MSVSProject(target=project_name,
                                       variant=variant,
                                       buildtarget=dll[0],
                                       srcs=srcs,
                                       incs=incs,
                                       resources=['setwallpaper_plugin.rc'],
                                       misc=['module_definition.def'],
                                       MSVSBUILDCOM=source_env['MSVSBUILDCOM'] + commandline_vars,
                                       MSVSREBUILDCOM=source_env['MSVSREBUILDCOM'] + commandline_vars,
                                       MSVSCLEANCOM=source_env['MSVSCLEANCOM'] + commandline_vars,
                                       auto_build_solution=0)
  gen_solution = source_env.MSVSSolution(target=project_base_name + source_env['MSVSSOLUTIONSUFFIX'],
                                         variant=variant,
                                         projects = [gen_project[0].srcnode()])
  source_env.Depends(gen_solution, gen_project);

  source_env.Alias('msvs_project', gen_solution)

Return('dll')
